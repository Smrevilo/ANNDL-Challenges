{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9862862,"sourceType":"datasetVersion","datasetId":6053468}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# AUGMENTATION TRAINING","metadata":{}},{"cell_type":"markdown","source":"## Some interesting stuffs to do every time","metadata":{}},{"cell_type":"code","source":"# Fix randomness and hide warnings\nseed = 42\n\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nos.environ['PYTHONHASHSEED'] = str(seed)\nos.environ['MPLCONFIGDIR'] = os.getcwd()+'/configs/'\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=Warning)\n\nimport numpy as np\nnp.random.seed(seed)\n\nimport logging\n\nimport random\nrandom.seed(seed)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:29:35.429250Z","iopub.execute_input":"2024-11-16T08:29:35.429640Z","iopub.status.idle":"2024-11-16T08:29:35.442892Z","shell.execute_reply.started":"2024-11-16T08:29:35.429597Z","shell.execute_reply":"2024-11-16T08:29:35.441820Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Import tensorflow\nimport tensorflow as tf\nfrom tensorflow import keras as tfk\nfrom tensorflow.keras import layers as tfkl\ntf.autograph.set_verbosity(0)\ntf.get_logger().setLevel(logging.ERROR)\ntf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)\ntf.random.set_seed(seed)\ntf.compat.v1.set_random_seed(seed)\nprint(tf.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:29:37.198714Z","iopub.execute_input":"2024-11-16T08:29:37.199680Z","iopub.status.idle":"2024-11-16T08:29:49.357338Z","shell.execute_reply.started":"2024-11-16T08:29:37.199638Z","shell.execute_reply":"2024-11-16T08:29:49.356426Z"}},"outputs":[{"name":"stdout","text":"2.16.1\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# Import some other useful libraries or functions\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport keras_cv.layers as kcvl\nfrom tensorflow.keras.utils import unpack_x_y_sample_weight","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:30:09.420165Z","iopub.execute_input":"2024-11-16T08:30:09.421025Z","iopub.status.idle":"2024-11-16T08:30:15.233405Z","shell.execute_reply.started":"2024-11-16T08:30:09.420984Z","shell.execute_reply":"2024-11-16T08:30:15.232596Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def auto_select_accelerator():\n    \"\"\"\n    Reference:\n        * https://www.kaggle.com/mgornergoogle/getting-started-with-100-flowers-on-tpu\n        * https://www.kaggle.com/xhlulu/ranzcr-efficientnet-tpu-training\n    \"\"\"\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n\n    return strategy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:30:43.743472Z","iopub.execute_input":"2024-11-16T08:30:43.744166Z","iopub.status.idle":"2024-11-16T08:30:43.751010Z","shell.execute_reply.started":"2024-11-16T08:30:43.744127Z","shell.execute_reply":"2024-11-16T08:30:43.749921Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"strategy = auto_select_accelerator()\nnumGPU = len(tf.config.list_physical_devices('GPU'))\nnumTPU = len(tf.config.list_logical_devices('TPU'))\nprint(\"Num GPUs Available: \", numGPU)\nprint(\"Num TPUs Available: \", numTPU)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:30:44.829535Z","iopub.execute_input":"2024-11-16T08:30:44.830220Z","iopub.status.idle":"2024-11-16T08:30:45.022403Z","shell.execute_reply.started":"2024-11-16T08:30:44.830178Z","shell.execute_reply":"2024-11-16T08:30:45.021372Z"}},"outputs":[{"name":"stdout","text":"Running on 1 replicas\nNum GPUs Available:  1\nNum TPUs Available:  0\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"data_path = \"/kaggle/input/data-preprocessed-npz/cleaned_training_set.npz\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:30:47.141030Z","iopub.execute_input":"2024-11-16T08:30:47.141904Z","iopub.status.idle":"2024-11-16T08:30:47.145950Z","shell.execute_reply.started":"2024-11-16T08:30:47.141864Z","shell.execute_reply":"2024-11-16T08:30:47.144918Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"data = np.load(data_path, allow_pickle=True)\nlst = data.files\nX = data[lst[0]]\ny = data[lst[1]]\n\n# Convert values in data to int\nX = X.astype(int)\n\n# Normalize data to the range [0, 1]\nX = (X / 255).astype('float32')\n\n# Convert labels to categorical format using one-hot encoding\ny = tf.keras.utils.to_categorical(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:30:49.612215Z","iopub.execute_input":"2024-11-16T08:30:49.612599Z","iopub.status.idle":"2024-11-16T08:30:57.101313Z","shell.execute_reply.started":"2024-11-16T08:30:49.612565Z","shell.execute_reply":"2024-11-16T08:30:57.100442Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Split data into training and validation sets, maintaining class distribution\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state=seed, test_size=0.15, stratify=y)\n\ndel X, y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:31:06.212284Z","iopub.execute_input":"2024-11-16T08:31:06.212672Z","iopub.status.idle":"2024-11-16T08:31:06.755072Z","shell.execute_reply.started":"2024-11-16T08:31:06.212639Z","shell.execute_reply":"2024-11-16T08:31:06.754025Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Print the shapes of the loaded datasets\nprint(\"Training Data Shape:\", X_train.shape)\nprint(\"Training Label Shape:\", y_train.shape)\nprint(\"Validation Data Shape:\", X_val.shape)\nprint(\"Validation Label Shape:\", y_val.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:31:08.898880Z","iopub.execute_input":"2024-11-16T08:31:08.899754Z","iopub.status.idle":"2024-11-16T08:31:08.905430Z","shell.execute_reply.started":"2024-11-16T08:31:08.899713Z","shell.execute_reply":"2024-11-16T08:31:08.904360Z"}},"outputs":[{"name":"stdout","text":"Training Data Shape: (10165, 96, 96, 3)\nTraining Label Shape: (10165, 8)\nValidation Data Shape: (1794, 96, 96, 3)\nValidation Label Shape: (1794, 8)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"markdown","source":"## Training section","metadata":{}},{"cell_type":"markdown","source":"We will use the ConvNeXtBase to speedup the training process.\\\nMoreover, we switch to GPU to make augmentations work correctly","metadata":{}},{"cell_type":"code","source":"convnext = tf.keras.applications.ConvNeXtBase(\n    include_top=False,\n    weights='imagenet',\n    input_shape=(96,96,3),\n)\n\nconvnext.trainable = False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:31:11.693807Z","iopub.execute_input":"2024-11-16T08:31:11.694443Z","iopub.status.idle":"2024-11-16T08:31:16.830317Z","shell.execute_reply.started":"2024-11-16T08:31:11.694401Z","shell.execute_reply":"2024-11-16T08:31:16.829505Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/convnext/convnext_base_notop.h5\n\u001b[1m350926856/350926856\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"Now let's write a complex augmentation pipeline, this will include:\\\n**1.** ChannelShuffle\\\n**2.** RandAugment\\\n**3.** AugMix\\\n**4.** GridMask\\\n**5.** tfkl.RandomFlip","metadata":{}},{"cell_type":"code","source":"with strategy.scope():\n    img_augmentation = tf.keras.Sequential(\n        [\n        kcvl.ChannelShuffle(groups=3),\n        kcvl.RandAugment(\n        value_range = (0,1),\n        augmentations_per_image=8,\n        magnitude=0.3,\n        magnitude_stddev=0.15,\n        rate=0.9090909090909091,\n        geometric=True,\n        seed=seed),\n        kcvl.AugMix(\n            severity=0.75,\n            value_range=(0, 255),\n            alpha=1.0\n        ),\n        kcvl.GridMask(ratio_factor=(0, 0.5), rotation_factor=0.15, fill_mode='constant', fill_value=0.0),\n        tfkl.RandomFlip()\n        ],\n        name=\"img_augmentation\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:31:17.180283Z","iopub.execute_input":"2024-11-16T08:31:17.180668Z","iopub.status.idle":"2024-11-16T08:31:17.250428Z","shell.execute_reply.started":"2024-11-16T08:31:17.180618Z","shell.execute_reply":"2024-11-16T08:31:17.249656Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"If we run our model by just including this augmentation pipeline we get a \"CPU not found error\" (see notebook Augmentations_experiences).\\\nAfter some researches, we get a solution: override tfk.Model train_step. Unfortunately, in this way we get a problem in the displaying of train loss that is lo longer reliable (stucks at 0.125).","metadata":{}},{"cell_type":"code","source":"class CustomModel(tfk.Model):\n    def train_step(self, data):\n        \n        \"\"\"\n            Overidden of train_step of tfk.Model to make augmentations works on TPU during\n            training, avoiding \"CPU:0 not found\" error.\n        \"\"\"\n        x, y, sample_weight = tf.keras.utils.unpack_x_y_sample_weight(data)\n\n        if tf.executing_eagerly():\n            x = img_augmentation(x, training=True)\n\n        # Run forward pass.\n        with tf.GradientTape() as tape:\n            y_pred = self(x, training=True)\n            loss = self.compiled_loss(y, y_pred, sample_weight=sample_weight, regularization_losses=self.losses)\n\n        # Run backwards pass.\n        gradients = tape.gradient(loss, self.trainable_variables)\n        self.optimizer.apply_gradients(zip(gradients, self.trainable_variables))\n\n        # Update and return metrics\n        self.compiled_metrics.update_state(y, y_pred, sample_weight=sample_weight)\n        return {m.name: m.result() for m in self.metrics}\n\n    def compile(self, *args, **kwargs):\n        super(CustomModel, self).compile(*args, **kwargs, metrics=['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:36:26.139715Z","iopub.execute_input":"2024-11-16T08:36:26.140141Z","iopub.status.idle":"2024-11-16T08:36:26.149242Z","shell.execute_reply.started":"2024-11-16T08:36:26.140102Z","shell.execute_reply":"2024-11-16T08:36:26.148246Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"from keras.utils import register_keras_serializable\n\n@register_keras_serializable()\nclass CustomCastLayer(tfk.layers.Layer):\n    def call(self, inputs):\n        return tf.cast(inputs * 255, tf.uint8)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:36:28.972434Z","iopub.execute_input":"2024-11-16T08:36:28.972824Z","iopub.status.idle":"2024-11-16T08:36:28.978002Z","shell.execute_reply.started":"2024-11-16T08:36:28.972789Z","shell.execute_reply":"2024-11-16T08:36:28.977028Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"def create_model(input_shape=(96, 96, 3)):\n    \"\"\"\n        Build a CNN with Tranfer Learning from ConvNeXtBase re-adapt to eight class classification.\n        Augmentations: CastLayer\n        FC layers block:\n            Batch Normalization -> Dense (activation = swish) -> Dropout (0.5)\n        Compile options:\n            LOSS: CategoricalFocalCrossentropy\n            METRICS: Accuracy\n            OPTIMIZER: AdamW with standard parameters\n    \"\"\"\n    tf.random.set_seed(seed)\n    inputs = tfk.Input(shape=input_shape)\n\n    # Cast input\n    x = CustomCastLayer()(inputs)\n\n    x = convnext(x)\n    x = tfkl.GlobalAveragePooling2D(name=\"avg_pool\")(x)\n    x = tfkl.BatchNormalization(name=\"batch_normalization_0\")(x)\n\n    # Add a Dense layer with 2 units and softmax activation as the classifier\n    x = tfkl.Dense(1024, activation=tf.keras.activations.swish, name='dense_layer_0')(x)\n    x = tfkl.Dropout(0.5)(x)\n    x = tfkl.BatchNormalization(name=\"batch_normalization_1\")(x)\n    x = tfkl.Dropout(0.5)(x)\n    x = tfkl.Dense(512, activation=tf.keras.activations.swish, name='dense_layer_1')(x)\n    x = tfkl.Dropout(0.5)(x)\n    x = tfkl.BatchNormalization(name=\"batch_normalization_2\")(x)\n\n    outputs = tfkl.Dense(8, activation='softmax')(x)\n\n    # Create a Model connecting input and output\n    model = CustomModel(inputs=inputs, outputs=outputs, name='model')\n\n    # Compile the model with Categorical Cross-Entropy loss and Adam optimizer\n    optimizer = tf.keras.optimizers.AdamW()\n    loss = tfk.losses.CategoricalFocalCrossentropy( alpha=0.25,\n                                                    gamma=2.0,\n                                                    from_logits=False,\n                                                    label_smoothing=0.0,\n                                                    axis=-1,\n                                                    reduction=\"sum_over_batch_size\",\n                                                    name=\"categorical_focal_crossentropy\",\n                                                )\n    model.compile(loss=loss, optimizer=optimizer)\n\n    # Return the model\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:36:30.876818Z","iopub.execute_input":"2024-11-16T08:36:30.877685Z","iopub.status.idle":"2024-11-16T08:36:30.887697Z","shell.execute_reply.started":"2024-11-16T08:36:30.877637Z","shell.execute_reply":"2024-11-16T08:36:30.886737Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"from IPython.display import clear_output\nfrom tensorflow.keras.callbacks import Callback\n\nclass PlotLearning(Callback):\n    \n    def on_train_begin(self, logs={}):\n        self.metrics = {}\n        for metric in logs:\n            self.metrics[metric] = []\n\n\n    def on_epoch_end(self, epoch, logs={}):\n        for metric in logs:\n            if metric in self.metrics:\n                self.metrics[metric].append(logs.get(metric))\n            else:\n                self.metrics[metric] = [logs.get(metric)]\n\n        metrics = [x for x in logs if 'val' not in x]\n\n        f, axs = plt.subplots(1, len(metrics), figsize=(15,5))\n        clear_output(wait=True)\n\n        if not isinstance(axs, np.ndarray):\n            axs = np.array([axs])\n\n        for i, metric in enumerate(metrics):\n            axs[i].plot(range(1, epoch + 2),\n                        self.metrics[metric],\n                        label=metric)\n            if logs['val_' + metric]:\n                axs[i].plot(range(1, epoch + 2),\n                            self.metrics['val_' + metric],\n                            label='val_' + metric)\n\n            axs[i].legend()\n            axs[i].grid()\n\n        plt.tight_layout()\n        plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:36:44.937227Z","iopub.execute_input":"2024-11-16T08:36:44.937617Z","iopub.status.idle":"2024-11-16T08:36:44.948142Z","shell.execute_reply.started":"2024-11-16T08:36:44.937579Z","shell.execute_reply":"2024-11-16T08:36:44.947220Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"from tensorflow.keras.callbacks import LearningRateScheduler\n\ndef lr_scheduler(curr_epoch, curr_lr, start= 60, rate= 0.008):\n    \"\"\"\n    Learning rate scheduler function.\n\n    This function adjusts the learning rate during training.\n    It keeps the initial learning rate unchanged until the 40th epoch,\n    after which it exponentially decreases the learning rate.\n\n    Parameters:\n    - curr_epoch: The current epoch index.\n    - curr_lr: The current learning rate.\n    - start: The epoch at which the exponential decay starts (default: 40).\n    - rate: The rate controlling the decay (default: 0.008).\n\n    Returns:\n    - Updated learning rate.\n    \"\"\"\n    if curr_epoch < start:\n        return curr_lr\n    else:\n        return curr_lr * tf.math.exp(-rate)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:36:46.897443Z","iopub.execute_input":"2024-11-16T08:36:46.898185Z","iopub.status.idle":"2024-11-16T08:36:46.903707Z","shell.execute_reply.started":"2024-11-16T08:36:46.898145Z","shell.execute_reply":"2024-11-16T08:36:46.902624Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Build a ConvNeXtLarge model for transfer learning\nwith strategy.scope():\n    model = create_model()\n\n# Set up a learning rate scheduler and a custom plotting callback\ncallbacks_list = [PlotLearning()]\n\n# Train the model with transfer learning\ntl_history = model.fit(\n    x = X_train, # input training data\n    y = y_train,  # target training data\n    batch_size = 64,\n    epochs = 350,\n    validation_data = (X_val, y_val), # validation data\n    callbacks = [tfk.callbacks.EarlyStopping(monitor='val_accuracy',\n                                             mode='max',\n                                             patience=35,\n                                             restore_best_weights=True),\n                 callbacks_list,\n                 ]\n).history","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T08:36:50.077823Z","iopub.execute_input":"2024-11-16T08:36:50.078270Z","iopub.status.idle":"2024-11-16T08:59:35.471759Z","shell.execute_reply.started":"2024-11-16T08:36:50.078234Z","shell.execute_reply":"2024-11-16T08:59:35.470693Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x500 with 2 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 99ms/step - accuracy: 0.9897 - loss: 0.1250 - val_accuracy: 0.9732 - val_loss: 0.0113\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"model_path = '/kaggle/working/model1.keras'\n\n# Save the trained ConvNeXt model with transfer learning\nmodel.save(model_path)\n\nprint(\"Finished training of \", model_path, \" model. Model saved successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T21:39:30.715311Z","iopub.execute_input":"2024-11-13T21:39:30.715735Z","iopub.status.idle":"2024-11-13T21:39:32.251190Z","shell.execute_reply.started":"2024-11-13T21:39:30.715689Z","shell.execute_reply":"2024-11-13T21:39:32.250223Z"}},"outputs":[{"name":"stdout","text":"Finished training of  /kaggle/working/model1.keras  model. Model saved successfully.\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"val_loss = []\nval_accuracy = []\ntrain_loss = []\ntrain_accuracy = []\n\nlast_val_loss, last_val_accuracy = model.evaluate(X_val, y_val)\nlast_train_loss, last_train_accuracy = model.evaluate(X_train, y_train)\n\nval_loss.append(last_val_loss)\nval_accuracy.append(last_val_accuracy)\ntrain_loss.append(last_train_loss)\ntrain_accuracy.append(last_train_accuracy)\n\nprint(\"Last model evaluation:\")\nprint(\"Train loss:\", last_train_loss)\nprint(\"Train accuracy:\", last_train_accuracy)\nprint(\"Validation loss:\", last_val_loss)\nprint(\"Validation accuracy:\", last_val_accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T09:01:32.184040Z","iopub.execute_input":"2024-11-16T09:01:32.184455Z","iopub.status.idle":"2024-11-16T09:01:57.533276Z","shell.execute_reply.started":"2024-11-16T09:01:32.184419Z","shell.execute_reply":"2024-11-16T09:01:57.532241Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m57/57\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - accuracy: 0.9777 - loss: 0.0077\n\u001b[1m318/318\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 53ms/step - accuracy: 0.9983 - loss: 5.3705e-04\nLast model evaluation:\nTrain loss: 0.0006121911574155092\nTrain accuracy: 0.9977373480796814\nValidation loss: 0.007835179567337036\nValidation accuracy: 0.9743589758872986\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# Get the weights of the last two dense layers and the output layer\nbatch_norm_0_weights = model.get_layer('batch_normalization_0').get_weights()\ndense_layer_0_weights = model.get_layer('dense_layer_0').get_weights()\nbatch_norm_1_weights = model.get_layer('batch_normalization_1').get_weights()\ndense_layer_1_weights = model.get_layer('dense_layer_1').get_weights()\nbatch_norm_2_weights = model.get_layer('batch_normalization_2').get_weights()\noutput_layer_weights = model.get_layer('dense').get_weights()\n\n# Save the weights to files\nnp.savez('batch_norm_0_weights.npz', *batch_norm_0_weights)\nnp.savez('dense_layer_0_weights.npz', *dense_layer_0_weights)\nnp.savez('batch_norm_1_weights.npz', *batch_norm_1_weights)\nnp.savez('dense_layer_1_weights.npz', *dense_layer_1_weights)\nnp.savez('batch_norm_2_weights.npz', *batch_norm_2_weights)\nnp.savez('output_layer_weights.npz', *output_layer_weights)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-16T09:06:14.011836Z","iopub.execute_input":"2024-11-16T09:06:14.012586Z","iopub.status.idle":"2024-11-16T09:06:14.040266Z","shell.execute_reply.started":"2024-11-16T09:06:14.012544Z","shell.execute_reply":"2024-11-16T09:06:14.039463Z"}},"outputs":[],"execution_count":24},{"cell_type":"markdown","source":"# Conclusion","metadata":{}},{"cell_type":"markdown","source":"As seen, we reached a very good accuracy on validation set. Unfortunately, we have used ConvNeXtBase and we have not used Fine Tuning yet.\\\nIn order to further improve the training time, we have decided to apply augmentation to the dataset and remove the augmentation layers inside the network.\\\nWe can now move on to apply a stronger augmentation in combination with Fine Tuning on ConvNeXtXLarge.","metadata":{}}]}