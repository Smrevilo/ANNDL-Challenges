{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9862862,"sourceType":"datasetVersion","datasetId":6053468}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Fix randomness and hide warnings\nseed = 42\n\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nos.environ['PYTHONHASHSEED'] = str(seed)\nos.environ['MPLCONFIGDIR'] = os.getcwd()+'/configs/'\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=Warning)\n\nimport numpy as np\nnp.random.seed(seed)\n\nimport logging\n\nimport random\nrandom.seed(seed)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:26:21.669207Z","iopub.execute_input":"2024-11-10T16:26:21.670212Z","iopub.status.idle":"2024-11-10T16:26:21.681603Z","shell.execute_reply.started":"2024-11-10T16:26:21.670164Z","shell.execute_reply":"2024-11-10T16:26:21.680623Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Import tensorflow\nimport tensorflow as tf\nfrom tensorflow import keras as tfk\nfrom tensorflow.keras import layers as tfkl\ntf.autograph.set_verbosity(0)\ntf.get_logger().setLevel(logging.ERROR)\ntf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)\ntf.random.set_seed(seed)\ntf.compat.v1.set_random_seed(seed)\nprint(tf.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:26:23.463120Z","iopub.execute_input":"2024-11-10T16:26:23.463756Z","iopub.status.idle":"2024-11-10T16:26:36.042117Z","shell.execute_reply.started":"2024-11-10T16:26:23.463714Z","shell.execute_reply":"2024-11-10T16:26:36.041144Z"}},"outputs":[{"name":"stdout","text":"2.16.1\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# Import some other useful libraries or functions\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport keras_cv.layers as kcvl\nfrom tensorflow.keras.utils import unpack_x_y_sample_weight","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:26:39.519638Z","iopub.execute_input":"2024-11-10T16:26:39.520283Z","iopub.status.idle":"2024-11-10T16:26:45.429303Z","shell.execute_reply.started":"2024-11-10T16:26:39.520242Z","shell.execute_reply":"2024-11-10T16:26:45.428474Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def auto_select_accelerator():\n    \"\"\"\n    Reference:\n        * https://www.kaggle.com/mgornergoogle/getting-started-with-100-flowers-on-tpu\n        * https://www.kaggle.com/xhlulu/ranzcr-efficientnet-tpu-training\n    \"\"\"\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n\n    return strategy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:26:46.386869Z","iopub.execute_input":"2024-11-10T16:26:46.387529Z","iopub.status.idle":"2024-11-10T16:26:46.394170Z","shell.execute_reply.started":"2024-11-10T16:26:46.387483Z","shell.execute_reply":"2024-11-10T16:26:46.393228Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"strategy = auto_select_accelerator()\nnumGPU = len(tf.config.list_physical_devices('GPU'))\nnumTPU = len(tf.config.list_logical_devices('TPU'))\nprint(\"Num GPUs Available: \", numGPU)\nprint(\"Num TPUs Available: \", numTPU)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:26:49.997237Z","iopub.execute_input":"2024-11-10T16:26:49.997599Z","iopub.status.idle":"2024-11-10T16:26:50.184526Z","shell.execute_reply.started":"2024-11-10T16:26:49.997564Z","shell.execute_reply":"2024-11-10T16:26:50.183529Z"}},"outputs":[{"name":"stdout","text":"Running on 1 replicas\nNum GPUs Available:  1\nNum TPUs Available:  0\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"data_path = \"/kaggle/input/data-preprocessed-npz/cleaned_training_set.npz\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:26:54.614502Z","iopub.execute_input":"2024-11-10T16:26:54.615410Z","iopub.status.idle":"2024-11-10T16:26:54.619522Z","shell.execute_reply.started":"2024-11-10T16:26:54.615358Z","shell.execute_reply":"2024-11-10T16:26:54.618423Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"data = np.load(data_path, allow_pickle=True)\nlst = data.files\nX = data[lst[0]]\ny = data[lst[1]]\n\n# Convert values in data to int\nX = X.astype(int)\n\n# Normalize data to the range [0, 1]\nX = (X / 255).astype('float32')\n\n# Create a mapping from label string to values\n\n# Convert labels to categorical format using one-hot encoding\ny = tf.keras.utils.to_categorical(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:26:56.436299Z","iopub.execute_input":"2024-11-10T16:26:56.436683Z","iopub.status.idle":"2024-11-10T16:27:01.874048Z","shell.execute_reply.started":"2024-11-10T16:26:56.436644Z","shell.execute_reply":"2024-11-10T16:27:01.873152Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Split data into training and validation sets, maintaining class distribution\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state=seed, test_size=0.15, stratify=y)\n\ndel X, y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:02.884295Z","iopub.execute_input":"2024-11-10T16:27:02.884934Z","iopub.status.idle":"2024-11-10T16:27:03.425286Z","shell.execute_reply.started":"2024-11-10T16:27:02.884894Z","shell.execute_reply":"2024-11-10T16:27:03.424292Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Print the shapes of the loaded datasets\nprint(\"Training Data Shape:\", X_train.shape)\nprint(\"Training Label Shape:\", y_train.shape)\nprint(\"Validation Data Shape:\", X_val.shape)\nprint(\"Validation Label Shape:\", y_val.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:05.065146Z","iopub.execute_input":"2024-11-10T16:27:05.065985Z","iopub.status.idle":"2024-11-10T16:27:05.071505Z","shell.execute_reply.started":"2024-11-10T16:27:05.065943Z","shell.execute_reply":"2024-11-10T16:27:05.070488Z"}},"outputs":[{"name":"stdout","text":"Training Data Shape: (10165, 96, 96, 3)\nTraining Label Shape: (10165, 8)\nValidation Data Shape: (1794, 96, 96, 3)\nValidation Label Shape: (1794, 8)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"convnext = tf.keras.applications.ConvNeXtXLarge(\n    include_top=False,\n    weights='imagenet',\n    input_shape=(96,96,3),\n)\n\nconvnext.trainable = False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:07.263594Z","iopub.execute_input":"2024-11-10T16:27:07.264422Z","iopub.status.idle":"2024-11-10T16:27:20.644587Z","shell.execute_reply.started":"2024-11-10T16:27:07.264383Z","shell.execute_reply":"2024-11-10T16:27:20.643602Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/convnext/convnext_xlarge_notop.h5\n\u001b[1m1393257616/1393257616\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"img_augmentation = tf.keras.Sequential(\n    [\n    kcvl.RandAugment(\n    # parameters set as in the paper\n    value_range = (0,1),\n    augmentations_per_image=3,\n    magnitude=0.3,\n    magnitude_stddev=0.15,\n    rate=0.9090909090909091,\n    geometric=True,\n    seed=seed),\n    tfkl.RandomFlip(),\n    tfkl.RandomRotation(factor= 0.5),\n    ],\n    name=\"img_augmentation\",)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:21.711436Z","iopub.execute_input":"2024-11-10T16:27:21.712191Z","iopub.status.idle":"2024-11-10T16:27:21.774926Z","shell.execute_reply.started":"2024-11-10T16:27:21.712148Z","shell.execute_reply":"2024-11-10T16:27:21.774165Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"class CustomModel(tfk.Model):\n    def train_step(self, data):\n        \n        \"\"\"\n            We override the train_step() method in the Model class to selectively\n            activate the RandAugment preprocessing layer only during training,\n            rather than during validation or testing. This ensures that the\n            RandAugment layer is invoked externally to the Model, but consistently\n            applies its random transformations each time an image is fed into the\n            model during training. By customizing the train_step() behavior, we\n            integrate the RandAugment functionality seamlessly into the training\n            process.\n\n            Code readapted from source code:\n            https://github.com/keras-team/keras/blob/v2.14.0/keras/engine/training.py#L1189-L1226\n        \"\"\"\n        x, y, sample_weight = tf.keras.utils.unpack_x_y_sample_weight(data)\n\n        # Perform augmentation on the input data for training\n        if tf.executing_eagerly():\n            x = img_augmentation(x, training=True)\n\n        # Run forward pass.\n        with tf.GradientTape() as tape:\n            y_pred = self(x, training=True)\n            loss = self.compiled_loss(y, y_pred, sample_weight=sample_weight, regularization_losses=self.losses)\n\n        # Run backwards pass.\n        gradients = tape.gradient(loss, self.trainable_variables)\n        self.optimizer.apply_gradients(zip(gradients, self.trainable_variables))\n\n        # Update and return metrics\n        self.compiled_metrics.update_state(y, y_pred, sample_weight=sample_weight)\n        return {m.name: m.result() for m in self.metrics}\n\n    def compile(self, *args, **kwargs):\n        super(CustomModel, self).compile(*args, **kwargs, metrics=['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:24.149237Z","iopub.execute_input":"2024-11-10T16:27:24.149630Z","iopub.status.idle":"2024-11-10T16:27:26.526515Z","shell.execute_reply.started":"2024-11-10T16:27:24.149594Z","shell.execute_reply":"2024-11-10T16:27:26.525592Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from keras.utils import register_keras_serializable\n\n@register_keras_serializable()\nclass CustomCastLayer(tfk.layers.Layer):\n    def call(self, inputs):\n        return tf.cast(inputs * 255, tf.uint8)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:29.018595Z","iopub.execute_input":"2024-11-10T16:27:29.018989Z","iopub.status.idle":"2024-11-10T16:27:29.025554Z","shell.execute_reply.started":"2024-11-10T16:27:29.018952Z","shell.execute_reply":"2024-11-10T16:27:29.024540Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"def create_model(input_shape=(96, 96, 3)):\n    \"\"\"\n        Build a ConvNeXtLarge-based CNN with image augmentation, and a custom\n        classifier for binary classification of healthy and unhealthy leaves.\n    \"\"\"\n    tf.random.set_seed(seed)\n    inputs = tfk.Input(shape=input_shape)\n\n    # Cast input\n    x = CustomCastLayer()(inputs)\n\n    x1 = convnext(x)\n    x2 = tfkl.GlobalAveragePooling2D(name=\"avg_pool\")(x1)\n    norm = tfkl.BatchNormalization(name=\"batch_normalization\")(x2)\n\n    # Add a Dense layer with 2 units and softmax activation as the classifier\n    intermediate1 = tfkl.Dense(1024, activation=tf.keras.activations.swish)(norm)\n\n    outputs = tfkl.Dense(8, activation='softmax')(intermediate1)\n\n    # Create a Model connecting input and output\n    model = CustomModel(inputs=inputs, outputs=outputs, name='model')\n\n    # Compile the model with Categorical Cross-Entropy loss and Adam optimizer\n    optimizer = tf.keras.optimizers.AdamW()\n    model.compile(loss=tfk.losses.CategoricalCrossentropy(), optimizer=optimizer)\n\n    # Return the model\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:31.078546Z","iopub.execute_input":"2024-11-10T16:27:31.078940Z","iopub.status.idle":"2024-11-10T16:27:31.087080Z","shell.execute_reply.started":"2024-11-10T16:27:31.078901Z","shell.execute_reply":"2024-11-10T16:27:31.086007Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"from IPython.display import clear_output\nfrom tensorflow.keras.callbacks import Callback\n\nclass PlotLearning(Callback):\n    \"\"\"\n    Callback for plotting the learning curves of a model during training.\n\n    This callback records and visualizes training and validation metrics (e.g.,\n    loss, accuracy) after each epoch to provide insights into the model's\n    performance.\n\n    Methods:\n    - on_train_begin: Initializes a dictionary to store training metrics.\n    - on_epoch_end: Collects and stores metrics after each epoch and plots the\n    learning curves.\n    \"\"\"\n    def on_train_begin(self, logs={}):\n        # Initializes a dictionary to store training metrics\n        self.metrics = {}\n        for metric in logs:\n            self.metrics[metric] = []\n\n\n    def on_epoch_end(self, epoch, logs={}):\n        # Storing metrics\n        for metric in logs:\n            if metric in self.metrics:\n                self.metrics[metric].append(logs.get(metric))\n            else:\n                self.metrics[metric] = [logs.get(metric)]\n\n        # Plotting\n        metrics = [x for x in logs if 'val' not in x]\n\n        # Set up subplots\n        f, axs = plt.subplots(1, len(metrics), figsize=(15,5))\n        clear_output(wait=True)\n\n        # Convert axs to a numpy array for indexing\n        if not isinstance(axs, np.ndarray):\n            axs = np.array([axs])\n\n        # Plot learning curves\n        for i, metric in enumerate(metrics):\n            axs[i].plot(range(1, epoch + 2),\n                        self.metrics[metric],\n                        label=metric)\n            if logs['val_' + metric]:\n                axs[i].plot(range(1, epoch + 2),\n                            self.metrics['val_' + metric],\n                            label='val_' + metric)\n\n            axs[i].legend()\n            axs[i].grid()\n\n        plt.tight_layout()\n        plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:33.842795Z","iopub.execute_input":"2024-11-10T16:27:33.843543Z","iopub.status.idle":"2024-11-10T16:27:33.854627Z","shell.execute_reply.started":"2024-11-10T16:27:33.843501Z","shell.execute_reply":"2024-11-10T16:27:33.853552Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"from tensorflow.keras.callbacks import LearningRateScheduler\n\ndef lr_scheduler(curr_epoch, curr_lr, start= 60, rate= 0.008):\n    \"\"\"\n    Learning rate scheduler function.\n\n    This function adjusts the learning rate during training.\n    It keeps the initial learning rate unchanged until the 40th epoch,\n    after which it exponentially decreases the learning rate.\n\n    Parameters:\n    - curr_epoch: The current epoch index.\n    - curr_lr: The current learning rate.\n    - start: The epoch at which the exponential decay starts (default: 40).\n    - rate: The rate controlling the decay (default: 0.008).\n\n    Returns:\n    - Updated learning rate.\n    \"\"\"\n    if curr_epoch < start:\n        return curr_lr\n    else:\n        return curr_lr * tf.math.exp(-rate)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:36.309140Z","iopub.execute_input":"2024-11-10T16:27:36.309504Z","iopub.status.idle":"2024-11-10T16:27:36.315599Z","shell.execute_reply.started":"2024-11-10T16:27:36.309467Z","shell.execute_reply":"2024-11-10T16:27:36.314551Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Define the path pattern for saving checkpoints and extract the directory\ncheckpoint_path = \"/kaggle/working/cp-{epoch:04d}.keras\"\ncheckpoint_dir = os.path.dirname(checkpoint_path)\n\n# Configure a callback to save the best model based on validation accuracy\ncp_callback = tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_path,\n    save_weights_only=False,\n    monitor='val_accuracy',\n    mode='max',\n    save_best_only=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:40.367001Z","iopub.execute_input":"2024-11-10T16:27:40.367732Z","iopub.status.idle":"2024-11-10T16:27:40.372919Z","shell.execute_reply.started":"2024-11-10T16:27:40.367670Z","shell.execute_reply":"2024-11-10T16:27:40.371741Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Build a ConvNeXtLarge model for transfer learning\nmodel = create_model()\n\n# Set up a learning rate scheduler and a custom plotting callback, as well as\n# checkpoints\nlr_schedule = LearningRateScheduler(lr_scheduler)\ncallbacks_list = [PlotLearning()]\ncallbacks = [cp_callback]\n\n# Train the model with transfer learning\ntl_history = model.fit(\n    x = X_train, # input training data\n    y = y_train,  # target training data\n    batch_size = 16,\n    epochs = 60,\n    validation_data = (X_val, y_val), # validation data\n    callbacks = [tfk.callbacks.EarlyStopping(monitor='val_accuracy',\n                                             mode='max',\n                                             patience=6,\n                                             restore_best_weights=True),\n                 callbacks_list,\n                 lr_schedule,\n                 callbacks]\n).history","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:27:45.120045Z","iopub.execute_input":"2024-11-10T16:27:45.120399Z","iopub.status.idle":"2024-11-10T16:40:16.029607Z","shell.execute_reply.started":"2024-11-10T16:27:45.120365Z","shell.execute_reply":"2024-11-10T16:40:16.028772Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x500 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABdIAAAHqCAYAAAAAkLx0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAADk1UlEQVR4nOzdd3xT9f7H8VeS7tLSQidQ9l5lI3sqgiBLRVyIgoKiV7ku3OMq1wHiREVxD5Sh/q6IIogKqCB7T6GMbkYXbdMkvz9OW6iUUWh70ub9fDzyyMnJGZ/kdCSf8zmfr8XlcrkQEREREREREREREZFiWc0OQERERERERERERETEnSmRLiIiIiIiIiIiIiJyFkqki4iIiIiIiIiIiIichRLpIiIiIiIiIiIiIiJnoUS6iIiIiIiIiIiIiMhZKJEuIiIiIiIiIiIiInIWSqSLiIiIiIiIiIiIiJyFEukiIiIiIiIiIiIiImfhZXYApcXpdHL48GGCgoKwWCxmhyMiIiIict5cLhfp6enUqFEDq7Vi1broc7iIiIiIVFQl+RxeaRLphw8fJiYmxuwwREREREQu2IEDB6hVq5bZYZSIPoeLiIiISEV3Pp/DK00iPSgoCDBedHBwsMnRVGx2u50ff/yRyy67DG9vb7PDkWLoGLk/HSP3p2Pk3nR83J+OUelKS0sjJiam8DNtRaLP4aVHv1fuT8fI/ekYuT8dI/em4+P+dIxKV0k+h1eaRHrBZaTBwcH6AH+R7HY7AQEBBAcH6xfSTekYuT8dI/enY+TedHzcn45R2aiIrVH0Obz06PfK/ekYuT8dI/enY+TedHzcn45R2Tifz+EVqwGjiIiIiIiIiIiIiEg5UyJdREREREREREREROQslEgXERERERERERERETmLStMj/Xw4nU5yc3PNDsPt2e12vLy8yM7OxuFwmB1OufL29sZms5kdhoiIiIiIiIiIVDDlkXv05LzdhSjNXJ/HJNJzc3P5+++/cTqdZofi9lwuF1FRURw4cKBCDnh1sUJCQoiKivLI1y4iIiIiIiIiIiVXXrlHT8/bXYjSyvV5RCLd5XIRHx+PzWYjJiYGq1Udbc7G6XSSkZFBlSpVPOq9crlcZGVlkZSUBEB0dLTJEYmIiIiIiIiIiLsrz9yjp+btLkRp5/o8IpGel5dHVlYWNWrUICAgwOxw3F7BZSh+fn4e9wvp7+8PQFJSEhEREWrzIiIiIiIiIiIiZ1WeuUdPzttdiNLM9XnEu13QL8jHx8fkSKQiKPiDZ7fbTY5ERERERERERETcnXKP7q20cn0ekUgvoL5Bcj70cyIiIiIiIiIiIiWlnJJ7Kq3j4lGJdBERERERERERERGRklIiXURERERERERERMTD9O7dm3vuucfsMCoMJdJFRERERERERERERM5CiXQpEQ3AKSIiIiIiIiIiIp5GiXQ3t2jRIrp3705ISAjVq1dn8ODB7Nmzp/D5gwcPMnr0aKpVq0ZgYCAdOnTgzz//LHz+//7v/+jYsSN+fn6EhYUxfPjwwucsFgtff/11kf2FhITwwQcfALBv3z4sFgtz5syhV69e+Pn58emnn5Kamsro0aOpWbMmAQEBtGrVis8//7zIdpxOJy+88AINGzbE19eX2rVr8+yzzwLQt29fJk2aVGT55ORkfHx8WLJkSWm8bSIiIiIiIiIiInKejh49yk033URoaCgBAQEMHDiQXbt2FT6/f/9+hgwZQmhoKIGBgbRo0YKFCxcWrnv99dcTHh6Ov78/jRo14v333zfrpZQZL7MDMIPL5eKE3WHKvv29bSUaKTYzM5PJkyfTunVrMjIyePzxxxk+fDjr168nKyuLXr16UbNmTb799luioqJYu3YtTqcTgO+++47hw4fzyCOP8NFHH5Gbm1v4A14SDz30ENOmTaNt27b4+fmRnZ1N+/btefDBBwkODua7777jxhtvpEGDBnTq1AmAKVOmMGvWLF5++WW6d+9OfHw827dvB2DcuHFMmjSJadOm4evrC8Ann3xCzZo16du3b4njExERERERERERcRdlmXt0Op2cyHXglZuH1Xp6jXRJc48Fbr75Znbt2sW3335LcHAwDz74IIMGDWLr1q14e3tz5513kpuby6+//kpgYCBbt26lSpUqADz22GNs3bqV77//nrCwMHbv3s2JEycu+rW6G49MpJ+wO2j++A+m7Hvr0wMI8Dn/t33kyJFFHs+ePZvw8HC2bt3KypUrSU5OZvXq1VSrVg2Ahg0bFi777LPPcu211/LUU08VzouNjS1xzPfccw8jRowoMu++++4rnL7rrrv44Ycf+PLLL+nUqRPp6em88sorvP7664wZMwaABg0a0L17dwBGjBjBpEmT+Oabb7jmmmsA+OCDD7j55psv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ZcoUunTpwmeffcYll1wCQOPGjWncuDH33nsvo0eP5v3331ci3ZNdf/31DB48mC1btnDDDTcUzm/UqBHz589nyJAhWCwWHnvssdNG2D1fDRs2xG6389prrzFkyBB+++033n///SLLTJkyhVatWnHHHXcwYcIEfHx8+Pnnn7n66qsJCwvjwQcf5IEHHsDHx4du3bqRnJzMli1buPXWW2nYsCExMTE8+eSTPPvss+zcuZNp06adV2yNGjXi448/pkOHDqSlpXH//fcXqULv1asXPXv2ZOTIkUyfPp2GDRuyfft2LBYLl19+OWD0exoxYgT3338/l112GbVq1bqg90lEpDQ5nS72pmSwZv9R1u4/xpq4o+xOyjhtuSq+XrSJCaFdnVDa1Q6hbUwoVQOUWBYREZELcK6K9MiWxn3aIaOfemD18olLRERMVR75x+L2+cQTTzBmzBiefPJJkpOTueuuu7jxxhuJjIzk77//5p133uHKK6+kRo0a7Nixg127dnHTTTdx4sQJ7r//fq666irq1avHwYMHWb16NSNHjiyV2M5EiXQ317dvX6pVq8aOHTu47rrrCudPnz6dW265ha5duxYmstPS0i5oH7GxsUyfPp3nn3+eKVOm0KNHDx577DEmTpxYuEzjxo358ccfefjhh+nUqRP+/v507tyZ0aNHA/DYY4/h5eXF448/zuHDh4mOjmbChAkAeHt78/nnnzNx4kRat25Nx44d+c9//nPGnuuneu+997jtttto164dMTExPPfcc9x3331Flpk3bx733Xcfo0ePJjMzk4YNG/Lf//63yDK33norn332GbfccssFvUciIhcrIyePDQeOGYnzOKPqPC0777Tl6oUF0rZ2SGHFeePIIGyVrNpcRERETGDPhuQdxvSZEul+wVCtPhzZCwkboEHf8otPRERMUx75x38KCAjghx9+4F//+hcdO3YkICCgsFC24Pnt27fz4YcfkpqaSnR0NHfeeSe33347eXl5pKamctNNN5GYmEhYWBgjRowotpNGaVIi3c1ZrVYOHz69p1LdunVZunRpkXl33nlnkccludTi3nvv5d577wXyey2lpXHbbbcV6bXUq1cvVqxYccY4H3nkER555JFin+/WrRsbNxa9PPDUnuk333wzN99882nrtW3bltWrVxeZd9VVVxV5XK1aNWbPnn3mFwccOnSI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52OPnI89cjb2x/nYI3siZtgoAAAAAAAAAADBQEU6AAAAAAAAAADVIJEOAAAAAAAAAEA1SKQDAAAAAAAAAFANEukAAAAAAAAAAFSDRDrKTZkyRf3791dKSorS0tJ0wQUXaN26dbbDwgk88sgjcrlcuummm2yHgkp27dqlX/3qV2rWrJmSkpLUo0cPffPNN7bDQpnS0lLdfffd6tixo5KSkpSZmak///nPYu62PXPnztV5552nVq1ayeVyafr06cf8u8/n0z333KOWLVsqKSlJo0eP1oYNG+wEG6Wq2yOPx6Pbb79dPXr0UIMGDdSqVStdeeWV2r17t72AgTDEcXj44VjcmTgWdy6Ow52H43Dn4zjceUiko9ycOXM0YcIEffXVV5oxY4Y8Ho/Gjh2r/Px826HhB77++mu9+OKL6tmzp+1QUMn333+vIUOGKC4uTp988olWr16txx9/XE2aNLEdGso8+uijeuGFF/Tss89qzZo1evTRR/XYY4/pmWeesR1a1MrPz1evXr303HPPVfnvjz32mJ5++mlNnTpVixYtUoMGDTRu3DgVFhaGONLoVd0eFRQUaOnSpbr77ru1dOlSvffee1q3bp1++tOfWogUCF8ch4cXjsWdiWNxZ+M43Hk4Dnc+jsOdx+Xj9B9OYN++fUpLS9OcOXM0bNgw2+GgzJEjR3Taaafp+eef14MPPqjevXvrySeftB0WJN1xxx2aP3++vvzyS9uh4ATOPfdcpaen6x//+Ef5fT/72c+UlJSkN954w2JkkCSXy6X3339fF1xwgSRTBdOqVSvdcsst+sMf/iBJOnz4sNLT0/Xqq6/qsssusxhtdPrhHlXl66+/1oABA7Rt2za1a9cudMEBEYTjcOfiWNy5OBZ3No7DnY3jcOfjONwZqEjHCR0+fFiS1LRpU8uRoLIJEybonHPO0ejRo22Hgh/473//q379+unnP/+50tLS1KdPH02bNs12WKhk8ODBysrK0vr16yVJy5cv17x583TWWWdZjgxV2bJli7Kzs4/5edeoUSMNHDhQCxcutBgZqnP48GG5XC41btzYdihA2OI43Lk4FncujsWdjePw8MJxeHjiODz4Ym0HAGfyer266aabNGTIEHXv3t12OCjzr3/9S0uXLtXXX39tOxRUYfPmzXrhhRc0efJk3XXXXfr666914403Kj4+XldddZXt8CBTqZSbm6suXbooJiZGpaWleuihh3T55ZfbDg1VyM7OliSlp6cfc396enr5v8FZCgsLdfvtt+sXv/iFUlNTbYcDhCWOw52LY3Fn41jc2TgODy8ch4cfjsNDg0Q6qjRhwgStXLlS8+bNsx0KyuzYsUOTJk3SjBkzlJiYaDscVMHr9apfv356+OGHJUl9+vTRypUrNXXqVA7eHeKdd97Rm2++qbfeekvdunXTsmXLdNNNN6lVq1bsEVBPHo9Hl1xyiXw+n1544QXb4QBhi+NwZ+JY3Pk4Fnc2jsOB4OE4PHRo7YLjTJw4UR9++KFmzZqlNm3a2A4HZZYsWaK9e/fqtNNOU2xsrGJjYzVnzhw9/fTTio2NVWlpqe0Qo17Lli116qmnHnNf165dtX37dksR4YduvfVW3XHHHbrsssvUo0cPXXHFFbr55ps1ZcoU26GhChkZGZKknJycY+7Pyckp/zc4g//gfdu2bZoxYwZVMEAdcRzuXByLOx/H4s7GcXh44Tg8fHAcHlok0lHO5/Np4sSJev/99/XFF1+oY8eOtkNCJaNGjdKKFSu0bNmy8rd+/frp8ssv17JlyxQTE2M7xKg3ZMgQrVu37pj71q9fr/bt21uKCD9UUFAgt/vYX30xMTHyer2WIkJ1OnbsqIyMDGVlZZXfl5ubq0WLFmnQoEEWI0Nl/oP3DRs2aObMmWrWrJntkICww3G483Es7nwcizsbx+HhhePw8MBxeOjR2gXlJkyYoLfeeksffPCBUlJSyvteNWrUSElJSZajQ0pKynF9Mhs0aKBmzZrRP9Mhbr75Zg0ePFgPP/ywLrnkEi1evFgvvfSSXnrpJduhocx5552nhx56SO3atVO3bt307bff6oknntCvf/1r26FFrSNHjmjjxo3l72/ZskXLli1T06ZN1a5dO91000168MEHddJJJ6ljx466++671apVq2qn1SOwqtujli1b6uKLL9bSpUv14YcfqrS0tPz4oWnTpoqPj7cVNhBWOA53Po7FnY9jcWfjONx5OA53Po7DHcgHlJFU5dsrr7xiOzScwPDhw32TJk2yHQYq+d///ufr3r27LyEhwdelSxffSy+9ZDskVJKbm+ubNGmSr127dr7ExERfp06dfH/84x99RUVFtkOLWrNmzaryd89VV13l8/l8Pq/X67v77rt96enpvoSEBN+oUaN869atsxt0lKluj7Zs2XLC44dZs2bZDh0IGxyHhyeOxZ2HY3Hn4jjceTgOdz6Ow53H5fP5fMFJ0QMAAAAAAAAAEP7okQ4AAAAAAAAAQDVIpAMAAAAAAAAAUA0S6QAAAAAAAAAAVINEOgAAAAAAAAAA1SCRDgAAAAAAAABANUikAwAAAAAAAABQDRLpAAAAAAAAAABUg0Q6AAAAAAAAAADVIJEOAAAAAAAAAEA1SKQDAAAAAAAAAFANEukAAAAAAAAAAFSDRDoAAAAAAAAAANX4f8OenU6UGdqGAAAAAElFTkSuQmCC"},"metadata":{}},{"name":"stdout","text":"\u001b[1m636/636\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m51s\u001b[0m 80ms/step - accuracy: 0.9936 - loss: 0.1250 - val_accuracy: 0.9654 - val_loss: 0.4093 - learning_rate: 0.0010\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"model_name = '/kaggle/working/model1.keras'\n\n# Save the trained ConvNeXt model with transfer learning\nmodel.save(model_name)\n\nprint(\"Finished training of \", model_name, \" model. Model saved successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:43:54.885931Z","iopub.execute_input":"2024-11-10T16:43:54.886712Z","iopub.status.idle":"2024-11-10T16:43:59.372248Z","shell.execute_reply.started":"2024-11-10T16:43:54.886654Z","shell.execute_reply":"2024-11-10T16:43:59.371266Z"}},"outputs":[{"name":"stdout","text":"Finished training of  /kaggle/working/model1.keras  model. Model saved successfully.\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# Lists to store evaluation metrics\nval_loss = []\nval_accuracy = []\ntrain_loss = []\ntrain_accuracy = []\n\n# Evaluate the last model on validation and training sets\nlast_val_loss, last_val_accuracy = model.evaluate(X_val, y_val)\nlast_train_loss, last_train_accuracy = model.evaluate(X_train, y_train)\n\n# Update the lists with the evaluation metrics\nval_loss.append(last_val_loss)\nval_accuracy.append(last_val_accuracy)\ntrain_loss.append(last_train_loss)\ntrain_accuracy.append(last_train_accuracy)\n\n# Display the evaluation metrics for the last model\nprint(\"Last model evaluation:\")\nprint(\"Train loss:\", last_train_loss)\nprint(\"Train accuracy:\", last_train_accuracy)\nprint(\"Validation loss:\", last_val_loss)\nprint(\"Validation accuracy:\", last_val_accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:44:41.920411Z","iopub.execute_input":"2024-11-10T16:44:41.920814Z","iopub.status.idle":"2024-11-10T16:45:36.587249Z","shell.execute_reply.started":"2024-11-10T16:44:41.920775Z","shell.execute_reply":"2024-11-10T16:45:36.586255Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m57/57\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 121ms/step - accuracy: 0.9825 - loss: 0.1733\n\u001b[1m318/318\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 132ms/step - accuracy: 0.9920 - loss: 0.0406\nLast model evaluation:\nTrain loss: 0.037888240069150925\nTrain accuracy: 0.9923266172409058\nValidation loss: 0.2542281746864319\nValidation accuracy: 0.9771460294723511\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"# Save weights of the Transfer Learning model\nmodel.save_weights('MODEL.weights.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:45:53.937317Z","iopub.execute_input":"2024-11-10T16:45:53.937932Z","iopub.status.idle":"2024-11-10T16:45:55.972018Z","shell.execute_reply.started":"2024-11-10T16:45:53.937892Z","shell.execute_reply":"2024-11-10T16:45:55.971014Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"del model\n# Create a new instance of CustomModel for fine-tuning\nmodel = create_model()\n\n# Load the weights for the model\nmodel.load_weights('MODEL.weights.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:45:59.791527Z","iopub.execute_input":"2024-11-10T16:45:59.792234Z","iopub.status.idle":"2024-11-10T16:46:01.224213Z","shell.execute_reply.started":"2024-11-10T16:45:59.792180Z","shell.execute_reply":"2024-11-10T16:46:01.223170Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"model.trainable = True\nfor layer in model.get_layer('convnext_xlarge').layers:\n    layer.trainable = False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:48:00.345418Z","iopub.execute_input":"2024-11-10T16:48:00.345820Z","iopub.status.idle":"2024-11-10T16:48:00.352737Z","shell.execute_reply.started":"2024-11-10T16:48:00.345781Z","shell.execute_reply":"2024-11-10T16:48:00.351710Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"# Enable training only for Conv2D and DepthwiseConv2D layers\nfor i, layer in enumerate(model.get_layer('convnext_xlarge').layers):\n    if isinstance(layer, tf.keras.layers.Conv2D):\n        layer.trainable = True\n        print(i, layer.name, type(layer).__name__, layer.trainable)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:48:03.789668Z","iopub.execute_input":"2024-11-10T16:48:03.790066Z","iopub.status.idle":"2024-11-10T16:48:03.798709Z","shell.execute_reply.started":"2024-11-10T16:48:03.790026Z","shell.execute_reply":"2024-11-10T16:48:03.797666Z"}},"outputs":[{"name":"stdout","text":"3 convnext_xlarge_stage_0_block_0_depthwise_conv Conv2D True\n10 convnext_xlarge_stage_0_block_1_depthwise_conv Conv2D True\n17 convnext_xlarge_stage_0_block_2_depthwise_conv Conv2D True\n25 convnext_xlarge_stage_1_block_0_depthwise_conv Conv2D True\n32 convnext_xlarge_stage_1_block_1_depthwise_conv Conv2D True\n39 convnext_xlarge_stage_1_block_2_depthwise_conv Conv2D True\n47 convnext_xlarge_stage_2_block_0_depthwise_conv Conv2D True\n54 convnext_xlarge_stage_2_block_1_depthwise_conv Conv2D True\n61 convnext_xlarge_stage_2_block_2_depthwise_conv Conv2D True\n68 convnext_xlarge_stage_2_block_3_depthwise_conv Conv2D True\n75 convnext_xlarge_stage_2_block_4_depthwise_conv Conv2D True\n82 convnext_xlarge_stage_2_block_5_depthwise_conv Conv2D True\n89 convnext_xlarge_stage_2_block_6_depthwise_conv Conv2D True\n96 convnext_xlarge_stage_2_block_7_depthwise_conv Conv2D True\n103 convnext_xlarge_stage_2_block_8_depthwise_conv Conv2D True\n110 convnext_xlarge_stage_2_block_9_depthwise_conv Conv2D True\n117 convnext_xlarge_stage_2_block_10_depthwise_conv Conv2D True\n124 convnext_xlarge_stage_2_block_11_depthwise_conv Conv2D True\n131 convnext_xlarge_stage_2_block_12_depthwise_conv Conv2D True\n138 convnext_xlarge_stage_2_block_13_depthwise_conv Conv2D True\n145 convnext_xlarge_stage_2_block_14_depthwise_conv Conv2D True\n152 convnext_xlarge_stage_2_block_15_depthwise_conv Conv2D True\n159 convnext_xlarge_stage_2_block_16_depthwise_conv Conv2D True\n166 convnext_xlarge_stage_2_block_17_depthwise_conv Conv2D True\n173 convnext_xlarge_stage_2_block_18_depthwise_conv Conv2D True\n180 convnext_xlarge_stage_2_block_19_depthwise_conv Conv2D True\n187 convnext_xlarge_stage_2_block_20_depthwise_conv Conv2D True\n194 convnext_xlarge_stage_2_block_21_depthwise_conv Conv2D True\n201 convnext_xlarge_stage_2_block_22_depthwise_conv Conv2D True\n208 convnext_xlarge_stage_2_block_23_depthwise_conv Conv2D True\n215 convnext_xlarge_stage_2_block_24_depthwise_conv Conv2D True\n222 convnext_xlarge_stage_2_block_25_depthwise_conv Conv2D True\n229 convnext_xlarge_stage_2_block_26_depthwise_conv Conv2D True\n237 convnext_xlarge_stage_3_block_0_depthwise_conv Conv2D True\n244 convnext_xlarge_stage_3_block_1_depthwise_conv Conv2D True\n251 convnext_xlarge_stage_3_block_2_depthwise_conv Conv2D True\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"# Set the number of layers to freeze\nN = 149\n\n# Set the first N layers as non-trainable\nfor i, layer in enumerate(model.get_layer('convnext_xlarge').layers[:N]):\n    layer.trainable = False\n\n# Print layer indices, names, and trainability status\nfor i, layer in enumerate(model.get_layer('convnext_xlarge').layers):\n    print(i, layer.name, layer.trainable)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:48:07.148642Z","iopub.execute_input":"2024-11-10T16:48:07.149082Z","iopub.status.idle":"2024-11-10T16:48:07.164215Z","shell.execute_reply.started":"2024-11-10T16:48:07.149036Z","shell.execute_reply":"2024-11-10T16:48:07.163208Z"}},"outputs":[{"name":"stdout","text":"0 input_layer False\n1 convnext_xlarge_prestem_normalization False\n2 convnext_xlarge_stem False\n3 convnext_xlarge_stage_0_block_0_depthwise_conv False\n4 convnext_xlarge_stage_0_block_0_layernorm False\n5 convnext_xlarge_stage_0_block_0_pointwise_conv_1 False\n6 convnext_xlarge_stage_0_block_0_gelu False\n7 convnext_xlarge_stage_0_block_0_pointwise_conv_2 False\n8 convnext_xlarge_stage_0_block_0_layer_scale False\n9 convnext_xlarge_stage_0_block_0_identity False\n10 convnext_xlarge_stage_0_block_1_depthwise_conv False\n11 convnext_xlarge_stage_0_block_1_layernorm False\n12 convnext_xlarge_stage_0_block_1_pointwise_conv_1 False\n13 convnext_xlarge_stage_0_block_1_gelu False\n14 convnext_xlarge_stage_0_block_1_pointwise_conv_2 False\n15 convnext_xlarge_stage_0_block_1_layer_scale False\n16 convnext_xlarge_stage_0_block_1_identity False\n17 convnext_xlarge_stage_0_block_2_depthwise_conv False\n18 convnext_xlarge_stage_0_block_2_layernorm False\n19 convnext_xlarge_stage_0_block_2_pointwise_conv_1 False\n20 convnext_xlarge_stage_0_block_2_gelu False\n21 convnext_xlarge_stage_0_block_2_pointwise_conv_2 False\n22 convnext_xlarge_stage_0_block_2_layer_scale False\n23 convnext_xlarge_stage_0_block_2_identity False\n24 convnext_xlarge_downsampling_block_0 False\n25 convnext_xlarge_stage_1_block_0_depthwise_conv False\n26 convnext_xlarge_stage_1_block_0_layernorm False\n27 convnext_xlarge_stage_1_block_0_pointwise_conv_1 False\n28 convnext_xlarge_stage_1_block_0_gelu False\n29 convnext_xlarge_stage_1_block_0_pointwise_conv_2 False\n30 convnext_xlarge_stage_1_block_0_layer_scale False\n31 convnext_xlarge_stage_1_block_0_identity False\n32 convnext_xlarge_stage_1_block_1_depthwise_conv False\n33 convnext_xlarge_stage_1_block_1_layernorm False\n34 convnext_xlarge_stage_1_block_1_pointwise_conv_1 False\n35 convnext_xlarge_stage_1_block_1_gelu False\n36 convnext_xlarge_stage_1_block_1_pointwise_conv_2 False\n37 convnext_xlarge_stage_1_block_1_layer_scale False\n38 convnext_xlarge_stage_1_block_1_identity False\n39 convnext_xlarge_stage_1_block_2_depthwise_conv False\n40 convnext_xlarge_stage_1_block_2_layernorm False\n41 convnext_xlarge_stage_1_block_2_pointwise_conv_1 False\n42 convnext_xlarge_stage_1_block_2_gelu False\n43 convnext_xlarge_stage_1_block_2_pointwise_conv_2 False\n44 convnext_xlarge_stage_1_block_2_layer_scale False\n45 convnext_xlarge_stage_1_block_2_identity False\n46 convnext_xlarge_downsampling_block_1 False\n47 convnext_xlarge_stage_2_block_0_depthwise_conv False\n48 convnext_xlarge_stage_2_block_0_layernorm False\n49 convnext_xlarge_stage_2_block_0_pointwise_conv_1 False\n50 convnext_xlarge_stage_2_block_0_gelu False\n51 convnext_xlarge_stage_2_block_0_pointwise_conv_2 False\n52 convnext_xlarge_stage_2_block_0_layer_scale False\n53 convnext_xlarge_stage_2_block_0_identity False\n54 convnext_xlarge_stage_2_block_1_depthwise_conv False\n55 convnext_xlarge_stage_2_block_1_layernorm False\n56 convnext_xlarge_stage_2_block_1_pointwise_conv_1 False\n57 convnext_xlarge_stage_2_block_1_gelu False\n58 convnext_xlarge_stage_2_block_1_pointwise_conv_2 False\n59 convnext_xlarge_stage_2_block_1_layer_scale False\n60 convnext_xlarge_stage_2_block_1_identity False\n61 convnext_xlarge_stage_2_block_2_depthwise_conv False\n62 convnext_xlarge_stage_2_block_2_layernorm False\n63 convnext_xlarge_stage_2_block_2_pointwise_conv_1 False\n64 convnext_xlarge_stage_2_block_2_gelu False\n65 convnext_xlarge_stage_2_block_2_pointwise_conv_2 False\n66 convnext_xlarge_stage_2_block_2_layer_scale False\n67 convnext_xlarge_stage_2_block_2_identity False\n68 convnext_xlarge_stage_2_block_3_depthwise_conv False\n69 convnext_xlarge_stage_2_block_3_layernorm False\n70 convnext_xlarge_stage_2_block_3_pointwise_conv_1 False\n71 convnext_xlarge_stage_2_block_3_gelu False\n72 convnext_xlarge_stage_2_block_3_pointwise_conv_2 False\n73 convnext_xlarge_stage_2_block_3_layer_scale False\n74 convnext_xlarge_stage_2_block_3_identity False\n75 convnext_xlarge_stage_2_block_4_depthwise_conv False\n76 convnext_xlarge_stage_2_block_4_layernorm False\n77 convnext_xlarge_stage_2_block_4_pointwise_conv_1 False\n78 convnext_xlarge_stage_2_block_4_gelu False\n79 convnext_xlarge_stage_2_block_4_pointwise_conv_2 False\n80 convnext_xlarge_stage_2_block_4_layer_scale False\n81 convnext_xlarge_stage_2_block_4_identity False\n82 convnext_xlarge_stage_2_block_5_depthwise_conv False\n83 convnext_xlarge_stage_2_block_5_layernorm False\n84 convnext_xlarge_stage_2_block_5_pointwise_conv_1 False\n85 convnext_xlarge_stage_2_block_5_gelu False\n86 convnext_xlarge_stage_2_block_5_pointwise_conv_2 False\n87 convnext_xlarge_stage_2_block_5_layer_scale False\n88 convnext_xlarge_stage_2_block_5_identity False\n89 convnext_xlarge_stage_2_block_6_depthwise_conv False\n90 convnext_xlarge_stage_2_block_6_layernorm False\n91 convnext_xlarge_stage_2_block_6_pointwise_conv_1 False\n92 convnext_xlarge_stage_2_block_6_gelu False\n93 convnext_xlarge_stage_2_block_6_pointwise_conv_2 False\n94 convnext_xlarge_stage_2_block_6_layer_scale False\n95 convnext_xlarge_stage_2_block_6_identity False\n96 convnext_xlarge_stage_2_block_7_depthwise_conv False\n97 convnext_xlarge_stage_2_block_7_layernorm False\n98 convnext_xlarge_stage_2_block_7_pointwise_conv_1 False\n99 convnext_xlarge_stage_2_block_7_gelu False\n100 convnext_xlarge_stage_2_block_7_pointwise_conv_2 False\n101 convnext_xlarge_stage_2_block_7_layer_scale False\n102 convnext_xlarge_stage_2_block_7_identity False\n103 convnext_xlarge_stage_2_block_8_depthwise_conv False\n104 convnext_xlarge_stage_2_block_8_layernorm False\n105 convnext_xlarge_stage_2_block_8_pointwise_conv_1 False\n106 convnext_xlarge_stage_2_block_8_gelu False\n107 convnext_xlarge_stage_2_block_8_pointwise_conv_2 False\n108 convnext_xlarge_stage_2_block_8_layer_scale False\n109 convnext_xlarge_stage_2_block_8_identity False\n110 convnext_xlarge_stage_2_block_9_depthwise_conv False\n111 convnext_xlarge_stage_2_block_9_layernorm False\n112 convnext_xlarge_stage_2_block_9_pointwise_conv_1 False\n113 convnext_xlarge_stage_2_block_9_gelu False\n114 convnext_xlarge_stage_2_block_9_pointwise_conv_2 False\n115 convnext_xlarge_stage_2_block_9_layer_scale False\n116 convnext_xlarge_stage_2_block_9_identity False\n117 convnext_xlarge_stage_2_block_10_depthwise_conv False\n118 convnext_xlarge_stage_2_block_10_layernorm False\n119 convnext_xlarge_stage_2_block_10_pointwise_conv_1 False\n120 convnext_xlarge_stage_2_block_10_gelu False\n121 convnext_xlarge_stage_2_block_10_pointwise_conv_2 False\n122 convnext_xlarge_stage_2_block_10_layer_scale False\n123 convnext_xlarge_stage_2_block_10_identity False\n124 convnext_xlarge_stage_2_block_11_depthwise_conv False\n125 convnext_xlarge_stage_2_block_11_layernorm False\n126 convnext_xlarge_stage_2_block_11_pointwise_conv_1 False\n127 convnext_xlarge_stage_2_block_11_gelu False\n128 convnext_xlarge_stage_2_block_11_pointwise_conv_2 False\n129 convnext_xlarge_stage_2_block_11_layer_scale False\n130 convnext_xlarge_stage_2_block_11_identity False\n131 convnext_xlarge_stage_2_block_12_depthwise_conv False\n132 convnext_xlarge_stage_2_block_12_layernorm False\n133 convnext_xlarge_stage_2_block_12_pointwise_conv_1 False\n134 convnext_xlarge_stage_2_block_12_gelu False\n135 convnext_xlarge_stage_2_block_12_pointwise_conv_2 False\n136 convnext_xlarge_stage_2_block_12_layer_scale False\n137 convnext_xlarge_stage_2_block_12_identity False\n138 convnext_xlarge_stage_2_block_13_depthwise_conv False\n139 convnext_xlarge_stage_2_block_13_layernorm False\n140 convnext_xlarge_stage_2_block_13_pointwise_conv_1 False\n141 convnext_xlarge_stage_2_block_13_gelu False\n142 convnext_xlarge_stage_2_block_13_pointwise_conv_2 False\n143 convnext_xlarge_stage_2_block_13_layer_scale False\n144 convnext_xlarge_stage_2_block_13_identity False\n145 convnext_xlarge_stage_2_block_14_depthwise_conv False\n146 convnext_xlarge_stage_2_block_14_layernorm False\n147 convnext_xlarge_stage_2_block_14_pointwise_conv_1 False\n148 convnext_xlarge_stage_2_block_14_gelu False\n149 convnext_xlarge_stage_2_block_14_pointwise_conv_2 False\n150 convnext_xlarge_stage_2_block_14_layer_scale False\n151 convnext_xlarge_stage_2_block_14_identity False\n152 convnext_xlarge_stage_2_block_15_depthwise_conv True\n153 convnext_xlarge_stage_2_block_15_layernorm False\n154 convnext_xlarge_stage_2_block_15_pointwise_conv_1 False\n155 convnext_xlarge_stage_2_block_15_gelu False\n156 convnext_xlarge_stage_2_block_15_pointwise_conv_2 False\n157 convnext_xlarge_stage_2_block_15_layer_scale False\n158 convnext_xlarge_stage_2_block_15_identity False\n159 convnext_xlarge_stage_2_block_16_depthwise_conv True\n160 convnext_xlarge_stage_2_block_16_layernorm False\n161 convnext_xlarge_stage_2_block_16_pointwise_conv_1 False\n162 convnext_xlarge_stage_2_block_16_gelu False\n163 convnext_xlarge_stage_2_block_16_pointwise_conv_2 False\n164 convnext_xlarge_stage_2_block_16_layer_scale False\n165 convnext_xlarge_stage_2_block_16_identity False\n166 convnext_xlarge_stage_2_block_17_depthwise_conv True\n167 convnext_xlarge_stage_2_block_17_layernorm False\n168 convnext_xlarge_stage_2_block_17_pointwise_conv_1 False\n169 convnext_xlarge_stage_2_block_17_gelu False\n170 convnext_xlarge_stage_2_block_17_pointwise_conv_2 False\n171 convnext_xlarge_stage_2_block_17_layer_scale False\n172 convnext_xlarge_stage_2_block_17_identity False\n173 convnext_xlarge_stage_2_block_18_depthwise_conv True\n174 convnext_xlarge_stage_2_block_18_layernorm False\n175 convnext_xlarge_stage_2_block_18_pointwise_conv_1 False\n176 convnext_xlarge_stage_2_block_18_gelu False\n177 convnext_xlarge_stage_2_block_18_pointwise_conv_2 False\n178 convnext_xlarge_stage_2_block_18_layer_scale False\n179 convnext_xlarge_stage_2_block_18_identity False\n180 convnext_xlarge_stage_2_block_19_depthwise_conv True\n181 convnext_xlarge_stage_2_block_19_layernorm False\n182 convnext_xlarge_stage_2_block_19_pointwise_conv_1 False\n183 convnext_xlarge_stage_2_block_19_gelu False\n184 convnext_xlarge_stage_2_block_19_pointwise_conv_2 False\n185 convnext_xlarge_stage_2_block_19_layer_scale False\n186 convnext_xlarge_stage_2_block_19_identity False\n187 convnext_xlarge_stage_2_block_20_depthwise_conv True\n188 convnext_xlarge_stage_2_block_20_layernorm False\n189 convnext_xlarge_stage_2_block_20_pointwise_conv_1 False\n190 convnext_xlarge_stage_2_block_20_gelu False\n191 convnext_xlarge_stage_2_block_20_pointwise_conv_2 False\n192 convnext_xlarge_stage_2_block_20_layer_scale False\n193 convnext_xlarge_stage_2_block_20_identity False\n194 convnext_xlarge_stage_2_block_21_depthwise_conv True\n195 convnext_xlarge_stage_2_block_21_layernorm False\n196 convnext_xlarge_stage_2_block_21_pointwise_conv_1 False\n197 convnext_xlarge_stage_2_block_21_gelu False\n198 convnext_xlarge_stage_2_block_21_pointwise_conv_2 False\n199 convnext_xlarge_stage_2_block_21_layer_scale False\n200 convnext_xlarge_stage_2_block_21_identity False\n201 convnext_xlarge_stage_2_block_22_depthwise_conv True\n202 convnext_xlarge_stage_2_block_22_layernorm False\n203 convnext_xlarge_stage_2_block_22_pointwise_conv_1 False\n204 convnext_xlarge_stage_2_block_22_gelu False\n205 convnext_xlarge_stage_2_block_22_pointwise_conv_2 False\n206 convnext_xlarge_stage_2_block_22_layer_scale False\n207 convnext_xlarge_stage_2_block_22_identity False\n208 convnext_xlarge_stage_2_block_23_depthwise_conv True\n209 convnext_xlarge_stage_2_block_23_layernorm False\n210 convnext_xlarge_stage_2_block_23_pointwise_conv_1 False\n211 convnext_xlarge_stage_2_block_23_gelu False\n212 convnext_xlarge_stage_2_block_23_pointwise_conv_2 False\n213 convnext_xlarge_stage_2_block_23_layer_scale False\n214 convnext_xlarge_stage_2_block_23_identity False\n215 convnext_xlarge_stage_2_block_24_depthwise_conv True\n216 convnext_xlarge_stage_2_block_24_layernorm False\n217 convnext_xlarge_stage_2_block_24_pointwise_conv_1 False\n218 convnext_xlarge_stage_2_block_24_gelu False\n219 convnext_xlarge_stage_2_block_24_pointwise_conv_2 False\n220 convnext_xlarge_stage_2_block_24_layer_scale False\n221 convnext_xlarge_stage_2_block_24_identity False\n222 convnext_xlarge_stage_2_block_25_depthwise_conv True\n223 convnext_xlarge_stage_2_block_25_layernorm False\n224 convnext_xlarge_stage_2_block_25_pointwise_conv_1 False\n225 convnext_xlarge_stage_2_block_25_gelu False\n226 convnext_xlarge_stage_2_block_25_pointwise_conv_2 False\n227 convnext_xlarge_stage_2_block_25_layer_scale False\n228 convnext_xlarge_stage_2_block_25_identity False\n229 convnext_xlarge_stage_2_block_26_depthwise_conv True\n230 convnext_xlarge_stage_2_block_26_layernorm False\n231 convnext_xlarge_stage_2_block_26_pointwise_conv_1 False\n232 convnext_xlarge_stage_2_block_26_gelu False\n233 convnext_xlarge_stage_2_block_26_pointwise_conv_2 False\n234 convnext_xlarge_stage_2_block_26_layer_scale False\n235 convnext_xlarge_stage_2_block_26_identity False\n236 convnext_xlarge_downsampling_block_2 False\n237 convnext_xlarge_stage_3_block_0_depthwise_conv True\n238 convnext_xlarge_stage_3_block_0_layernorm False\n239 convnext_xlarge_stage_3_block_0_pointwise_conv_1 False\n240 convnext_xlarge_stage_3_block_0_gelu False\n241 convnext_xlarge_stage_3_block_0_pointwise_conv_2 False\n242 convnext_xlarge_stage_3_block_0_layer_scale False\n243 convnext_xlarge_stage_3_block_0_identity False\n244 convnext_xlarge_stage_3_block_1_depthwise_conv True\n245 convnext_xlarge_stage_3_block_1_layernorm False\n246 convnext_xlarge_stage_3_block_1_pointwise_conv_1 False\n247 convnext_xlarge_stage_3_block_1_gelu False\n248 convnext_xlarge_stage_3_block_1_pointwise_conv_2 False\n249 convnext_xlarge_stage_3_block_1_layer_scale False\n250 convnext_xlarge_stage_3_block_1_identity False\n251 convnext_xlarge_stage_3_block_2_depthwise_conv True\n252 convnext_xlarge_stage_3_block_2_layernorm False\n253 convnext_xlarge_stage_3_block_2_pointwise_conv_1 False\n254 convnext_xlarge_stage_3_block_2_gelu False\n255 convnext_xlarge_stage_3_block_2_pointwise_conv_2 False\n256 convnext_xlarge_stage_3_block_2_layer_scale False\n257 convnext_xlarge_stage_3_block_2_identity False\n258 layer_normalization False\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"# Set up a learning rate scheduler and a custom plotting callback, as well as\n# checkpoints\nlr_schedule = LearningRateScheduler(lr_scheduler)\ncallbacks_list = [PlotLearning()]\ncallbacks = [cp_callback]\n\n# Compile the Transfer Learning model: use a lower learning rate for fine-tuning,\n# as well as increase the weight decay regularization, to prevent overfitting\nmodel.compile(\n    loss=tfk.losses.CategoricalCrossentropy(),\n    optimizer=tfk.optimizers.AdamW(learning_rate=5e-5,\n                                   weight_decay= 0.01),\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:49:34.851384Z","iopub.execute_input":"2024-11-10T16:49:34.852071Z","iopub.status.idle":"2024-11-10T16:49:34.863011Z","shell.execute_reply.started":"2024-11-10T16:49:34.852032Z","shell.execute_reply":"2024-11-10T16:49:34.862212Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"# Train the model with fine-tuning\nprint(\"Last part of CNN is training.\")\nft_history = model.fit(\n    x = X_train, # input training data\n    y = y_train,  # target training data\n    batch_size = 32,\n    epochs = 30,\n    validation_data = (X_val, y_val), # validation data\n    callbacks = [tfk.callbacks.EarlyStopping(monitor= 'val_accuracy',\n                                             mode= 'max',\n                                             patience= 10,\n                                             restore_best_weights= True),\n                 callbacks_list,\n                 lr_schedule,\n                 callbacks]\n).history","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T16:49:54.480637Z","iopub.execute_input":"2024-11-10T16:49:54.481040Z","iopub.status.idle":"2024-11-10T17:09:28.736909Z","shell.execute_reply.started":"2024-11-10T16:49:54.481000Z","shell.execute_reply":"2024-11-10T17:09:28.735848Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x500 with 2 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"\u001b[1m318/318\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 202ms/step - accuracy: 1.0000 - loss: 0.1250 - val_accuracy: 0.9783 - val_loss: 0.2318 - learning_rate: 5.0000e-05\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"model_name = 'GPU_MODEL.weight.h5'\n\n# Save the trained ConvNeXt model with transfer learning\nmodel.save(model_name)\n\nprint(\"Finished training of \", model_name, \" model. Model saved successfully.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T17:11:58.653561Z","iopub.execute_input":"2024-11-10T17:11:58.654355Z","iopub.status.idle":"2024-11-10T17:12:00.730973Z","shell.execute_reply.started":"2024-11-10T17:11:58.654314Z","shell.execute_reply":"2024-11-10T17:12:00.730042Z"}},"outputs":[{"name":"stdout","text":"Finished training of  GPU_MODEL.weight.h5  model. Model saved successfully.\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"# Evaluate the last model on validation and training sets\nlast_val_loss, last_val_accuracy = model.evaluate(X_val, y_val)\nlast_train_loss, last_train_accuracy = model.evaluate(X_train, y_train)\n\n# Update the lists with the evaluation metrics\nval_loss.append(last_val_loss)\nval_accuracy.append(last_val_accuracy)\ntrain_loss.append(last_train_loss)\ntrain_accuracy.append(last_train_accuracy)\n\n# Display the evaluation metrics for the last model\nprint(\"Last model evaluation:\")\nprint(\"Train loss:\", last_train_loss)\nprint(\"Train accuracy:\", last_train_accuracy)\nprint(\"Validation loss:\", last_val_loss)\nprint(\"Validation accuracy:\", last_val_accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-10T17:10:57.891925Z","iopub.execute_input":"2024-11-10T17:10:57.892766Z","iopub.status.idle":"2024-11-10T17:11:51.733786Z","shell.execute_reply.started":"2024-11-10T17:10:57.892694Z","shell.execute_reply":"2024-11-10T17:11:51.732813Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m57/57\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 120ms/step - accuracy: 0.9844 - loss: 0.1556\n\u001b[1m318/318\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 128ms/step - accuracy: 0.9986 - loss: 0.0030\nLast model evaluation:\nTrain loss: 0.00333479605615139\nTrain accuracy: 0.998622715473175\nValidation loss: 0.22886782884597778\nValidation accuracy: 0.9799330830574036\n","output_type":"stream"}],"execution_count":37}]}