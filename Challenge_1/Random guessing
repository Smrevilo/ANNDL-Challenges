{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9904280,"sourceType":"datasetVersion","datasetId":6035549}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **RANDOM GUESSING MODEL**","metadata":{}},{"cell_type":"markdown","source":"The most trivial idea for our task is to use a random guessing model.\\\nSince we have eight labels, we expect an accuracy of 0.125.\\\nLet's see","metadata":{}},{"cell_type":"markdown","source":"Firstly we import all the necessary libraries","metadata":{}},{"cell_type":"code","source":"# Fix randomness and hide warnings\nseed = 42\n\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nos.environ['PYTHONHASHSEED'] = str(seed)\nos.environ['MPLCONFIGDIR'] = os.getcwd()+'/configs/'\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=Warning)\n\nimport numpy as np\nnp.random.seed(seed)\n\nimport logging\n\nimport random\nrandom.seed(seed)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:18.332080Z","iopub.execute_input":"2024-11-19T09:30:18.333119Z","iopub.status.idle":"2024-11-19T09:30:18.389064Z","shell.execute_reply.started":"2024-11-19T09:30:18.333059Z","shell.execute_reply":"2024-11-19T09:30:18.387968Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Import tensorflow\nimport tensorflow as tf\ntf.random.set_seed(seed)\ntf.compat.v1.set_random_seed(seed)\nprint(tf.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:18.391029Z","iopub.execute_input":"2024-11-19T09:30:18.391400Z","iopub.status.idle":"2024-11-19T09:30:33.800412Z","shell.execute_reply.started":"2024-11-19T09:30:18.391364Z","shell.execute_reply":"2024-11-19T09:30:33.799349Z"}},"outputs":[{"name":"stdout","text":"2.16.1\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# Import some other useful libraries or functions\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:33.801794Z","iopub.execute_input":"2024-11-19T09:30:33.802359Z","iopub.status.idle":"2024-11-19T09:30:34.354795Z","shell.execute_reply.started":"2024-11-19T09:30:33.802324Z","shell.execute_reply":"2024-11-19T09:30:34.353502Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"## Data preparation","metadata":{}},{"cell_type":"markdown","source":"This is the most classical data preparation pipeline:\n1. Load the data\n2. Split the data into samples and images\n3. Normalize the samples\n4. Convert the labels to categorical\n5. Build a **tf.Data.Dataset** for performance boosting","metadata":{}},{"cell_type":"code","source":"data_path = \"/kaggle/input/blood-cells/cleaned_training_set.npz\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:34.357270Z","iopub.execute_input":"2024-11-19T09:30:34.357927Z","iopub.status.idle":"2024-11-19T09:30:34.363607Z","shell.execute_reply.started":"2024-11-19T09:30:34.357888Z","shell.execute_reply":"2024-11-19T09:30:34.362236Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"data = np.load(data_path, allow_pickle=True)\nlst = data.files\nX = data[lst[0]]\ny = data[lst[1]]\n\n# Convert values in data to int\nX = X.astype(int)\n\n# Normalize data to the range [0, 1]\nX = (X / 255).astype('float32')\n\n# Convert labels to categorical format using one-hot encoding\ny = tf.keras.utils.to_categorical(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:34.365908Z","iopub.execute_input":"2024-11-19T09:30:34.366423Z","iopub.status.idle":"2024-11-19T09:30:41.840986Z","shell.execute_reply.started":"2024-11-19T09:30:34.366369Z","shell.execute_reply":"2024-11-19T09:30:41.839876Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"batch_size = 256","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:41.842381Z","iopub.execute_input":"2024-11-19T09:30:41.842731Z","iopub.status.idle":"2024-11-19T09:30:41.847623Z","shell.execute_reply.started":"2024-11-19T09:30:41.842697Z","shell.execute_reply":"2024-11-19T09:30:41.846367Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"dataset = tf.data.Dataset.from_tensor_slices((X, y)).cache().shuffle(20480).batch(batch_size)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:41.848777Z","iopub.execute_input":"2024-11-19T09:30:41.849100Z","iopub.status.idle":"2024-11-19T09:30:43.742211Z","shell.execute_reply.started":"2024-11-19T09:30:41.849068Z","shell.execute_reply":"2024-11-19T09:30:43.741071Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"## Model definition","metadata":{}},{"cell_type":"code","source":"def random_guessing_model(dataset, n_labels=8):\n\n    \"\"\"\n    This function takes a dataset and predict the class of each image by random choices.\n    It also compute the accuracy and the F1 score\n    \"\"\"\n    \n    all_true_labels = []\n    all_random_predictions = []\n    \n    for images, labels in dataset:\n        \n        true_labels = np.argmax(labels.numpy(), axis=1)  # to integer\n    \n        # Predictions\n        random_predictions = np.random.randint(0, n_labels, size=true_labels.shape)\n    \n        all_true_labels.extend(true_labels)\n        all_random_predictions.extend(random_predictions)\n    \n    all_true_labels = np.array(all_true_labels)\n    all_random_predictions = np.array(all_random_predictions)\n    \n    accuracy = np.mean(all_true_labels == all_random_predictions)\n    f1 = f1_score(all_true_labels, all_random_predictions, average='macro')\n    \n    return {\n        \"accuracy\": accuracy,\n        \"f1_score\": f1\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:43.743652Z","iopub.execute_input":"2024-11-19T09:30:43.743990Z","iopub.status.idle":"2024-11-19T09:30:43.750817Z","shell.execute_reply.started":"2024-11-19T09:30:43.743958Z","shell.execute_reply":"2024-11-19T09:30:43.749651Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"scores = random_guessing_model(dataset)\nprint(f\"\\nAccuracy: {scores['accuracy']:.2f}\\nF1-score: {scores['f1_score']:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T09:30:43.752154Z","iopub.execute_input":"2024-11-19T09:30:43.752980Z","iopub.status.idle":"2024-11-19T09:30:46.872756Z","shell.execute_reply.started":"2024-11-19T09:30:43.752928Z","shell.execute_reply":"2024-11-19T09:30:46.871695Z"}},"outputs":[{"name":"stdout","text":"\nAccuracy: 0.13\nF1-score: 0.12\n","output_type":"stream"}],"execution_count":9}]}